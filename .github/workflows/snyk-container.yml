# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which checks out the code, builds a container
# image using Docker and scans that image for vulnerabilities using
# Snyk. The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity
# issues, monitor images for newly disclosed vulnerabilities in Snyk and
# fail PR checks for new vulnerabilities, see https://github.com/snyk/actions/

name: Snyk Container

on:
  workflow_run:
    workflows: ["Create and publish a Docker image"]
    types:
      - completed
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * *'    # Force Scan Daily

permissions:
  contents: read
  packages: read
  security-events: write


jobs:
  snyk:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (for SARIF upload context)
        uses: actions/checkout@v5

      - name: Install jq
        run: sudo apt-get --purge -y install jq # Possible fix

      - name: Pull image from GitHub Container Registry
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER}/audit-tools:latest"
          echo "Pulling $IMAGE"
          docker pull "$IMAGE"

#      - name: Build a Docker image
#        run: docker build -t sethbodine/audit-tools -f containerfile .

      - name: Normalize image name
        id: image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${OWNER}/audit-tools:latest" >> $GITHUB_OUTPUT

      - name: Run Snyk to check Docker image for vulnerabilities
        # Snyk can be used to break the build when it detects vulnerabilities.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
#          image: ghcr.io/${{ github.repository_owner }}-lower/audit-tools:latest
#          image: ghcr.io/${{ github.repository_owner }}/audit-tools:latest
          image: ${{ steps.image.outputs.image }}
          args: --file=containerfile
        # Replace any "null" security severity values with 0. The null value is used in the case
        # of license-related findings, which do not do not indicate a security vulnerability.
        # See https://github.com/github/codeql-action/issues/2187 for more context.

      - name: Post process snyk sarif file  
        run: |
          sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk.sarif
      # - name: Fix SARIF file # added section
      #   run: jq -c '.runs |= map(select((.results | length) > 0))' <snyk.sarif >onlysnyk.sarif
  
      - name: Flatten SARIF runs
        run: |
          jq -c '{
            "version": .version,
            "runs": [
              reduce .runs[] as $r (
                {"tool": null, "results": [], "artifacts": [], "invocations": []};
                .tool = (if .tool == null then $r.tool else .tool end)
                | .results += ($r.results // [])
                | .artifacts += ($r.artifacts // [])
                | .invocations += ($r.invocations // [])
              )
            ]
          }' snyk.sarif > onlysnyk.sarif    
  
      - name: Debug flattened SARIF
        run: |
          echo "Number of runs in onlysnyk.sarif:"
          jq '.runs | length' onlysnyk.sarif
          echo "Preview of first 30 lines:"
          head -30 onlysnyk.sarif
  
      - name: Upload SARIF as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: sarif-artifact
          path: |
            onlysnyk.sarif
            snyk.sarif
          retention-days: 7
      # - name: Output base SARIF file
      #   run: cat snyk.sarif
      # - name: Output Modified SARIF file
      #   run: cat onlysnyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: onlysnyk.sarif # tweaked for possible fix
          category: snyk-docker
          #sarif_file: snyk.sarif
