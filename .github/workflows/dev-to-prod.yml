name: Promote dev to main

on:
  push:
    branches: [dev]

jobs:
  create-and-merge-pr:
    name: PR from dev to main
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      issues: write

    outputs:
      merge.outcome: ${{ steps.set_merge_output.outputs.merge_outcome }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch main
        run: git fetch origin main

      - name: Check if PR already exists
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --base main --head dev --state open --json number -q '.[0].number' || echo "")
          echo "pr_number=$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Create PR if none exist
        id: create_pr
        if: steps.check_pr.outputs.pr_number == ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          DATE=$(git log -1 --pretty=format:'%ad' --date=iso)
          COMMIT_MESSAGE="$(git log -1 --pretty=format:'%s%n%n%b')"
          COMMIT_LIST="$(git log origin/main..HEAD --oneline)"
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD)

          printf "Automated PR\n\n**Commit Info:**\n- SHA: \`${{ github.sha }}\`\n- Author: $AUTHOR\n- Date: $DATE\n\n**Summary of Commits:**\n\`\`\`\n$COMMIT_LIST\n\`\`\`\n\n**Commit Message:**\n$COMMIT_MESSAGE\n\n**Files Changed:**\n\`\`\`\n$CHANGED_FILES\n\`\`\`\n" > pr_body.md

          gh pr create \
            --base main \
            --head dev \
            --title "Promote: ${{ github.sha }}" \
            --body-file pr_body.md

          # Set PR number output after creation
          PR_NUMBER=$(gh pr list --base main --head dev --state open --json number -q '.[0].number')
          echo "pr_number=$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Attempt auto-merge
        id: merge
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use PR number from either check or create step
          PR_NUMBER=${{ steps.check_pr.outputs.pr_number }}
          if [ -z "$PR_NUMBER" ] && [ "${{ steps.create_pr.outcome }}" == "success" ]; then
            PR_NUMBER=${{ steps.create_pr.outputs.pr_number }}
          fi

          if [ -n "$PR_NUMBER" ]; then
            gh pr merge "$PR_NUMBER" --auto --squash 2>merge-error.log || echo "failed" > merge-status.txt
            echo "PR found: $PR_NUMBER merge status:"
            cat merge-status.txt
            echo "end of output"
          else
            echo "No PR found to merge"
            echo "failed" > merge-status.txt
          fi

      - name: Set merge outcome output
        id: set_merge_output
        run: |
          if [ -f merge-status.txt ] && grep -q "failed" merge-status.txt; then
            echo "merge_outcome=failure" >> $GITHUB_OUTPUT
            echo "merge_outcome=failure" 
          else
            echo "merge_outcome=success" >> $GITHUB_OUTPUT
            echo "merge_outcome=success" 
          fi

      - name: Create issue if merge fails
        if: ${{ steps.set_merge_output.outputs.merge_outcome == 'failure' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ERROR_MSG=$(cat merge-error.log)
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          printf "Automated Issue\n\n**Merge error:**\n\`\`\`\n$ERROR_MSG\n\`\`\`\n\n[View workflow run]($WORKFLOW_URL)" > issue_body.md

          gh issue create \
            --title "Auto-merge failed for commit ${{ github.sha }}" \
            --body-file issue_body.md \
            --label bug --label auto-merge-failure \
            --assignee "${{ github.actor }}"

  sync-dev:
    name: Sync dev to main after merge
    needs: create-and-merge-pr
    runs-on: ubuntu-latest
    if: ${{ needs.create-and-merge-pr.outputs.merge.outcome == 'success' }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync dev with main
        run: |
          git fetch origin
          git checkout dev
          git reset --hard origin/main
          git push origin dev --force

