name: Create and publish a Docker image

on:
  push:
    branches:
     - 'main'
    paths-ignore:
      - '.github/workflows/*.yml'
  schedule:
    - cron:  '0 0 * * 1'    # Force Build Weekly
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1		# added to try and reduce disk space utilisation
  BUILDKIT_PROGRESS: plain
  BUILDKIT_INLINE_CACHE: 1

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      - name: Delete Older Packages
        uses: actions/delete-package-versions@v5
        with: 
          package-name: 'audit-tools'
          package-type: 'container'
          min-versions-to-keep: 10

      - name: Install tree 
        run: sudo apt-get update && sudo apt-get install -y tree 

      - name: Capture initial filesystem tree 
        if: always()
        run: tree -a -L 2 -I 'proc|sys|dev|run' / > fs-tree-start.txt 2> tree-errors.log || true

      - name: Upload initial tree snapshot
        uses: actions/upload-artifact@v4
        with:
          name: fs-tree-start
          path: |
            fs-tree-start.txt
            tree-errors.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Disk sizes start
        if: always()
        run: |
              echo "===== Disk usage $(date) ====="
              df -h /
              du -sh /home/runner/work || true

#      - name: Delete huge unnecessary tools folder
#        run: |
          # rm -rf /opt/hostedtoolcache
#          find . -maxdepth 1 -mindepth 1 '!' -path ./containerd '!' -path ./actionarchivecache '!' -path ./runner '!' -path ./runner-cache '!' -path ./hostedtoolcache -exec rm -rf '{}' ';'

#      - name: Check disk usage - Post
#        run: df -h

      - name: Free disk space safely
        run: |
          echo "Initial disk usage:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost || true
          docker system prune -af || true
          echo "After cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value={{ date 'YYYY-MM-DD' }}-${{ github.sha }}
            type=sha,prefix=sha-

            # type=schedule
            # type=ref,event=tag
            # type=ref,event=branch,suffix=-{{ sha }}
            # type=ref,event=pr
            # type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            # type=edge,branch=$repo.default_branch
            # type=ref,event=branch,priority=1000
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Built from commit ${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.trigger=${{ github.event_name }}
            org.opencontainers.image.commit.message=${{ github.event.head_commit.message }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . 
          file: ./containerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha		# Added as part of the disk clean-up work
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Capture final filesystem tree 
        if: always()
        run: tree -a -L 2 -I 'proc|sys|dev|run' / > fs-tree-end.txt 2>> tree-errors.log || true

      - name: Disk sizes end
        if: always()
        run: |
              echo "===== Disk usage $(date) ====="
              df -h /
              du -sh /home/runner/work || true

      - name: Upload final tree snapshot
        uses: actions/upload-artifact@v4
        with:
          name: fs-tree-end
          path: |
            fs-tree-end.txt
            tree-errors.log
          if-no-files-found: ignore
          retention-days: 7

      # - name: Stop disk monitor
      #   if: always()
      #   run: |
      #     if [ -f disk-monitor.pid ]; then
      #        PID=$(cat disk-monitor.pid)
      #        echo "Stopping disk monitor PID $PID"
      #        kill $PID || true
      #        sleep 2
      #      else
      #        echo "No disk-monitor.pid file found  monitor may not have started."
      #      fi
      #
      #      if [ -s disk-usage.log ]; then
      #        echo "Disk usage log:"
      #        cat disk-usage.log
      #      else
      #        echo "disk-usage.log is missing or empty - Creating empty file."
      #      fi


#       - name: Upload monitoring artifacts
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: disk-monitor-${{ matrix.arch }}
#           path: |
#             disk-usage.log
#             fs-tree-start.txt
#             fs-tree-end.txt
#             tree-errors.log 
#           if-no-files-found: ignore
#           retention-days: 7
